#include <iostream>
using namespace std;

bool isSafe(int ** arr,int x,int y,int n){
  for(int row=0;row<x;row++){ //if any queen is already present. 
    if(arr[row][y]==1){ //if there 1 means queen present.
      return false;
    }
  }
  int row=x;
  int col=y;
  while(row>=0 && col>=0){ 
    if(arr[row][col]==1){ //check left diagonal
      return false;
    }
    row--;
    col--;
  }
  row =x; col=y;
  while(row>=0 && col<=n){//check right diagonal
    if(arr[row][col]==1){
      return false;
    }
    row--;
    col++;
  }
  return true;
}
bool nQueen(int** arr,int x,int n){ //row ka count 
  if(x>=n){//greater than equal to n placed n queens
    return true;
  }
  for(int col=0;col<n;col++){ 
    if(isSafe(arr,x, col,n)){
      arr[x][col]=1;//placed queen
      if(nQueen(arr, x+1, n)){ //can we place other queen in other rows.
        return true;
      }
      arr[x][col]=0;//backtracking 
    }
    
  }
  return false;
}
int main(){
  int n;
  cin>>n;
  int **arr =new int*[n]; //2d array
  for(int i=0;i<n;i++){//1d array memory allocation
    arr[i]=new int [n];
    for(int j=0;j<n;j++){ //initalize 2d to 0
     arr[i][j]=0;
  }
  }
  if(nQueen(arr,0,n)){
    for(int i=0;i<n;i++){//print array
      for(int j=0;j<n;j++){
        cout<<arr[i][j]<<" ";
      }
      cout<<endl;
    }
  }
}
